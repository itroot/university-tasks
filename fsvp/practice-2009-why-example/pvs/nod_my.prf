(nod_my
 (rem_pos_TCC1 0
  (rem_pos_TCC1-1 nil 3462996686 3463276907 ("" (subtype-tcc) nil nil)
   proved
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   62 10 nil nil))
 (rem_pos 0
  (rem_pos-1 nil 3463001766 3463276908
   ("" (skosimp*)
    (("" (expand "rem")
      (("" (expand "div")
        (("" (assert)
          (("" (lemma "floor_def")
            (("" (inst -1 "a!1/b!1")
              (("" (assert)
                (("" (skosimp*)
                  (("" (lemma "real_parts")
                    (("" (inst -1 "a!1/b!1")
                      (("" (lemma "both_sides_times1")
                        ((""
                          (inst -1 "b!1" "a!1/b!1"
                           " floor(a!1 / b!1) + fractional(a!1 / b!1)")
                          (("" (skosimp*)
                            (("" (split)
                              (("1"
                                (split)
                                (("1"
                                  (assert)
                                  (("1"
                                    (simplify -1)
                                    (("1"
                                      (lemma "div_cancel2")
                                      (("1"
                                        (inst -1 "b!1" "a!1")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (case
                                             "fractional(a!1/b!1) >= 0")
                                            (("1"
                                              (bash)
                                              (("1"
                                                (name "c!1" "a!1/b!1")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (replace -4 1)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "commutative_mult")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "floor(c!1)"
                                                             "b!1")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (simplify
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "pos_times_ge")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "fractional(c!1)"
                                                                       "b!1")
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (split)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (split)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (skosimp*)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (sgn_nat_rew formula-decl nil abs_rews "ints/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (commutative_mult formula-decl nil number_fields nil)
    (pos_times_ge formula-decl nil real_props nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (real_parts formula-decl nil floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (floor_def formula-decl nil floor_ceil nil)
    (div const-decl "integer" div "ints/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil))
   814 670 t shostak))
 (gcd_com 0
  (gcd_com-1 nil 3462660730 3463277129
   ("" (skosimp*)
    (("" (lemma "gcd_def")
      (("" (lemma "gcd_def")
        (("" (inst -1 "x1!1" "x2!1")
          (("" (inst -2 "x2!1" "x1!1")
            (("" (expand "is_gcd")
              (("" (skosimp*)
                (("" (expand "is_divisor")
                  (("" (assert)
                    (("" (inst -3 "gcd(x2!1,x1!1)")
                      (("" (inst -6 "gcd(x1!1,x2!1)")
                        (("" (split)
                          (("1" (split)
                            (("1" (assert) nil nil)
                             ("2" (skosimp*) (("2" (assert) nil nil))
                              nil)
                             ("3" (skosimp*) nil nil)
                             ("4" (assert)
                              (("4"
                                (skosimp*)
                                (("4" (assert) nil nil))
                                nil))
                              nil)
                             ("5" (skosimp*) nil nil))
                            nil)
                           ("2" (skosimp*) (("2" (assert) nil nil))
                            nil)
                           ("3" (skosimp*) nil nil)
                           ("4" (skosimp*) (("4" (assert) nil nil))
                            nil)
                           ("5" (skosimp*) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gcd const-decl "[int, int -> int]" nod_spec_why nil)
    (is_divisor const-decl "bool" nod_spec_why nil)
    (is_gcd const-decl "bool" nod_spec_why nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (gcd_def formula-decl nil nod_spec_why nil))
   149741 530 t shostak))
 (lemma_gcd_eq_arg 0
  (lemma_gcd_eq_arg-1 nil 3462675200 3463277277
   ("" (skosimp*)
    (("" (lemma "gcd_def")
      (("" (inst -1 "a!1" "a!1")
        (("" (expand "is_gcd")
          (("" (skosimp*)
            (("" (expand "is_divisor")
              (("" (inst -3 "a!1")
                (("" (split)
                  (("1" (assert)
                    (("1" (case "a!1<gcd(a!1,a!1)")
                      (("1" (assert)
                        (("1" (lemma "rem_lt")
                          (("1" (inst -1 "a!1" "gcd(a!1, a!1)")
                            (("1" (split)
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (lemma "rem_eq_arg")
                    (("2" (inst -1 "a!1") (("2" (skosimp*) nil nil))
                      nil))
                    nil)
                   ("3" (lemma "rem_eq_arg")
                    (("3" (inst -1 "a!1")
                      (("1" (skosimp*) (("1" (assert) nil nil)) nil)
                       ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (skosimp*)
                    (("4" (assert)
                      (("4" (expand "rem" 2) (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("5" (skosimp*) (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (div_eq_arg formula-decl nil div "ints/")
    (a!1 skolem-const-decl "int" nod_my nil)
    (rem_eq_arg formula-decl nil rem "ints/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (abs_nat_rew formula-decl nil abs_rews "ints/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (rem_lt formula-decl nil rem "ints/")
    (gcd const-decl "[int, int -> int]" nod_spec_why nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (is_divisor const-decl "bool" nod_spec_why nil)
    (is_gcd const-decl "bool" nod_spec_why nil)
    (gcd_def formula-decl nil nod_spec_why nil))
   127951 330 t shostak))
 (lemma_gcd_pos 0
  (lemma_gcd_pos-1 nil 3463000769 3463276908
   ("" (skosimp*)
    (("" (lemma "gcd_def")
      (("" (inst -1 "a!1" "b!1")
        (("" (expand "is_gcd")
          (("" (skosimp*)
            (("" (expand "is_divisor")
              (("" (inst -3 "1")
                (("" (assert)
                  (("" (split)
                    (("1" (assert)
                      (("1" (expand "rem" 1) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "rem" 1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((gcd_def formula-decl nil nod_spec_why nil)
    (is_gcd const-decl "bool" nod_spec_why nil)
    (is_divisor const-decl "bool" nod_spec_why nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_by_one formula-decl nil div "ints/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   65 40 t shostak))
 (lemma_gcd1 0
  (lemma_gcd1-1 nil 3462673397 3463277667
   ("" (skosimp*)
    (("" (expand "is_divisor")
      (("" (lemma "gcd_def")
        (("" (lemma "gcd_def")
          (("" (inst -1 "a!1" "b!1")
            (("" (inst -2 "rem(a!1,b!1)" "b!1")
              (("" (expand "is_gcd")
                (("" (skosimp*)
                  (("" (expand "is_divisor")
                    (("" (inst -3 "gcd(rem(a!1, b!1), b!1)")
                      (("" (inst -6 "gcd(a!1, b!1)")
                        (("" (split)
                          (("1" (split)
                            (("1" (grind) nil nil)
                             ("2"
                              (case "gcd(rem(a!1, b!1), b!1) < gcd(a!1, b!1)")
                              (("1"
                                (lemma "rem_def")
                                (("1"
                                  (inst -1 "b!1" "a!1" "rem(a!1,b!1)")
                                  (("1"
                                    (simplify)
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (split)
                                        (("1"
                                          (split)
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (lemma "rem_def")
                                              (("1"
                                                (inst
                                                 -1
                                                 "gcd(a!1, b!1)"
                                                 "a!1"
                                                 "0")
                                                (("1"
                                                  (simplify)
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (skosimp*)
                                                          (("1"
                                                            (lemma
                                                             "rem_def")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "gcd(a!1, b!1)"
                                                               "b!1"
                                                               "0")
                                                              (("1"
                                                                (simplify)
                                                                (("1"
                                                                  (skosimp*)
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (name
                                                                         "x"
                                                                         "gcd(a!1, b!1)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (name
                                                                             "y"
                                                                             "gcd(rem(a!1,b!1), b!1)")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "rem_def")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x"
                                                                                       "rem(x * q!2, x * q!3)"
                                                                                       "0")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (skosimp*)
                                                                                              (("1"
                                                                                                (simplify)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "rem")
                                                                                                    (("1"
                                                                                                      (simplify)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "div_multiple")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x"
                                                                                                           "q!4")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "q!2-q!3*div(x*q!2,x*q!3)")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   3
                                                                                                   "q!2-q!3*div(x*q!2,x*q!3)")
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "rem_eq_0")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "b!1"
                                                                             "gcd(a!1,b!1)")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "b!1/gcd(a!1,b!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "rem_eq_0")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "a!1"
                                                             "gcd(a!1,b!1)")
                                                            (("2"
                                                              (split)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "a!1 / gcd(a!1, b!1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "lemma_gcd_pos")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "a!1"
                                                       "b!1")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma
                                                   "lemma_gcd_pos")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "a!1"
                                                     "b!1")
                                                    (("3"
                                                      (split)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (inst 1 "div(a!1,b!1)")
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("3" (skosimp*) nil nil)
                             ("4" (skosimp*) (("4" (assert) nil nil))
                              nil)
                             ("5" (skosimp*) nil nil))
                            nil)
                           ("2" (split)
                            (("1" (assert)
                              (("1"
                                (lemma "rem_def")
                                (("1"
                                  (inst
                                   -1
                                   "gcd(rem(a!1,b!1),b!1)"
                                   "a!1"
                                   "0")
                                  (("1"
                                    (skosimp*)
                                    (("1"
                                      (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (skosimp*)
                                          (("1"
                                            (lemma "rem_eq_0")
                                            (("1"
                                              (inst
                                               -1
                                               "a!1"
                                               "gcd(rem(a!1, b!1), b!1)")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (inst
                                             1
                                             "(b!1/gcd(rem(a!1, b!1),b!1))*div(a!1,b!1)+(rem(a!1,b!1)/gcd(rem(a!1, b!1),b!1))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "rem_eq_0")
                                              (("2"
                                                (inst
                                                 -1
                                                 "b!1"
                                                 "gcd(rem(a!1, b!1), b!1)")
                                                (("2"
                                                  (lemma "rem_eq_0")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "rem(a!1,b!1)"
                                                     "gcd(rem(a!1, b!1), b!1)")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (lemma
                                                           "closed_plus"
                                                           ("i"
                                                            "(rem(a!1, b!1) / gcd(rem(a!1, b!1), b!1))"
                                                            "j"
                                                            "(b!1 / gcd(rem(a!1, b!1), b!1)) * floor(a!1 / b!1)"))
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "closed_times"
                                                             ("i"
                                                              "(b!1 / gcd(rem(a!1, b!1), b!1))"
                                                              "j"
                                                              "floor(a!1 / b!1)"))
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "lemma_gcd_pos")
                                    (("2"
                                      (inst -1 "rem(a!1,b!1)" "b!1")
                                      (("2"
                                        (split)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma "rem_pos")
                                            (("2"
                                              (inst -1 "a!1" "b!1")
                                              (("2"
                                                (split)
                                                (("1" (assert) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (split)
                                      (("1"
                                        (lemma "lemma_gcd_pos")
                                        (("1"
                                          (inst
                                           -1
                                           "rem(a!1,b!1)"
                                           "b!1")
                                          (("1"
                                            (split)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma "rem_pos")
                                                (("2"
                                                  (inst -1 "a!1" "b!1")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "lemma_gcd_pos")
                                        (("2"
                                          (inst
                                           -1
                                           "rem(a!1,b!1)"
                                           "b!1")
                                          (("2"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (lemma "rem_pos")
                                                (("2"
                                                  (inst -1 "a!1" "b!1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "rem_def")
                              (("2"
                                (inst
                                 -1
                                 "gcd(a!1,b!1)"
                                 "rem(a!1,b!1)"
                                 "0")
                                (("1"
                                  (skosimp*)
                                  (("1"
                                    (split)
                                    (("1"
                                      (split)
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "gcd(a!1, b!1) * q!1 > 0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "div_cancel1")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "gcd(a!1,b!1)"
                                                       "q!1")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -2 :dir RL)
                                                  (("2"
                                                    (lemma "rem_pos")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "a!1"
                                                       "b!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (inst
                                           1
                                           "a!1/gcd(a!1,b!1) - b!1/gcd(a!1,b!1)*div(a!1,b!1)")
                                          (("1"
                                            (assert)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "rem_eq_0")
                                              (("2"
                                                (lemma "rem_eq_0")
                                                (("2"
                                                  (inst
                                                   -2
                                                   "a!1"
                                                   "gcd(a!1,b!1)")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "b!1"
                                                     "gcd(a!1,b!1)")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (lemma
                                                           "closed_minus"
                                                           ("i"
                                                            "a!1/gcd(a!1,b!1)"
                                                            "j"
                                                            "b!1/gcd(a!1,b!1)*floor(a!1/b!1)"))
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "closed_times"
                                                             ("i"
                                                              "b!1/gcd(a!1,b!1)"
                                                              "j"
                                                              "floor(a!1/b!1)"))
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "lemma_gcd_pos")
                                  (("2"
                                    (inst -1 "a!1" "b!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "lemma_gcd_pos")
                                  (("3"
                                    (inst -1 "a!1" "b!1")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp*) nil nil)
                             ("4" (skosimp*) (("4" (assert) nil nil))
                              nil)
                             ("5" (skosimp*) nil nil))
                            nil)
                           ("3" (skosimp*) nil nil)
                           ("4" (skosimp*) (("4" (assert) nil nil))
                            nil)
                           ("5" (skosimp*) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((gcd_def formula-decl nil nod_spec_why nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (is_gcd const-decl "bool" nod_spec_why nil)
    (rem_pos formula-decl nil nod_my nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (div_nat formula-decl nil div "ints/")
    (closed_times formula-decl nil integers nil)
    (closed_plus formula-decl nil integers nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (closed_minus formula-decl nil integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (sgn const-decl "int" real_defs nil)
    (div const-decl "integer" div "ints/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (div_multiple formula-decl nil div "ints/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "int" nod_my nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rem_eq_0 formula-decl nil rem "ints/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (lemma_gcd_pos formula-decl nil nod_my nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (a!1 skolem-const-decl "int" nod_my nil)
    (> const-decl "bool" reals nil)
    (b!1 skolem-const-decl "int" nod_my nil)
    (gcd const-decl "[int, int -> int]" nod_spec_why nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (is_divisor const-decl "bool" nod_spec_why nil))
   364251 23870 t shostak))
 (lemma_gcd2 0
  (lemma_gcd2-1 nil 3463005035 3463277719
   ("" (skosimp*)
    (("" (lemma "gcd_def")
      (("" (inst -1 "a!1" "b!1")
        (("" (expand "is_gcd")
          (("" (skosimp*)
            (("" (expand "is_divisor")
              (("" (case "gcd(a!1,b!1)<b!1")
                (("1" (inst -4 "b!1")
                  (("1" (split)
                    (("1" (assert) nil nil)
                     ("2" (skosimp*) (("2" (assert) nil nil)) nil)
                     ("3" (grind) nil nil)
                     ("4" (skosimp*)
                      (("4" (assert) (("4" (grind) nil nil)) nil)) nil)
                     ("5" (skosimp*) nil nil))
                    nil))
                  nil)
                 ("2" (case "gcd(a!1,b!1)>b!1")
                  (("1" (lemma "rem_lt")
                    (("1" (inst -1 "b!1" "gcd(a!1,b!1)")
                      (("1" (split)
                        (("1" (assert) nil nil) ("2" (grind) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (gcd const-decl "[int, int -> int]" nod_spec_why nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rem_lt formula-decl nil rem "ints/")
    (nonzero_integer nonempty-type-eq-decl nil integers nil)
    (b!1 skolem-const-decl "int" nod_my nil)
    (a!1 skolem-const-decl "int" nod_my nil)
    (/= const-decl "boolean" notequal nil)
    (> const-decl "bool" reals nil)
    (is_divisor const-decl "bool" nod_spec_why nil)
    (is_gcd const-decl "bool" nod_spec_why nil)
    (gcd_def formula-decl nil nod_spec_why nil))
   42236 1130 t shostak)))

