(nod_why
 (nod_impl_po_1 0
  (nod_impl_po_1-1 nil 3449420252 3463074820
   ("" (skolem!)
    (("" (skosimp*)
      (("" (split 1)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (lemma "gcd_com")
          (("3" (inst -1 "x1!1" "x2!1") (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   proved-incomplete
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (gcd_com formula-decl nil nod_my nil))
   570459 200 t shostak))
 (nod_impl_po_2 0
  (nod_impl_po_2-1 nil 3462672329 3463154422
   ("" (skosimp*)
    (("" (split)
      (("1" (assert)
        (("1" (replace -10)
          (("1" (lemma "rem_pos")
            (("1" (inst -1 "y2!2" "y1!2")
              (("1" (skosimp*)
                (("1" (assert)
                  (("1" (replace -12)
                    (("1" (replace -11)
                      (("1" (replace -10)
                        (("1" (split)
                          (("1" (assert)
                            (("1" (lemma "lemma_gcd2")
                              (("1"
                                (inst -1 "y2!2" "y1!2")
                                (("1"
                                  (expand "is_divisor")
                                  (("1"
                                    (lemma "gcd_com")
                                    (("1"
                                      (inst -1 "y1!2" "y2!2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "rem" 1)
                            (("2" (lemma "ml1")
                              (("2"
                                (inst -1 "y1!2" "y2!2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "lemma_gcd1")
                            (("3" (inst -1 "y2!2" "y1!2")
                              (("3"
                                (assert)
                                (("3"
                                  (expand "is_divisor")
                                  (("3"
                                    (split)
                                    (("1"
                                      (replace -5)
                                      (("1"
                                        (lemma "gcd_com")
                                        (("1"
                                          (inst -1 "y2!2" "y1!2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (lemma "lemma_gcd2")
                                        (("2"
                                          (inst -1 "y2!2" "y1!2")
                                          (("2"
                                            (expand "is_divisor")
                                            (("2"
                                              (lemma "gcd_com")
                                              (("2"
                                                (inst -1 "y2!2" "y1!2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace -10)
        (("2" (replace -9)
          (("2" (lemma "ml1")
            (("2" (inst -1 "y1!2" "y2!2")
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((y2!2 skolem-const-decl "int" nod_why nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (y1!2 skolem-const-decl "int" nod_why nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_pos formula-decl nil nod_my nil)
    (lemma_gcd1 formula-decl nil nod_my nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_nat formula-decl nil div "ints/")
    (ml1 formula-decl nil rem "ints/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gcd_com formula-decl nil nod_my nil)
    (is_divisor const-decl "bool" nod_spec_why nil)
    (lemma_gcd2 formula-decl nil nod_my nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   1741333 2250 t shostak))
 (nod_impl_po_3 0
  (nod_impl_po_3-1 nil 3463154450 3463154720
   ("" (skosimp*)
    (("" (replace -9)
      (("" (replace -8)
        (("" (expand "zwf_zero")
          (("" (expand "zwf")
            (("" (split)
              (("1" (skosimp*)
                (("1" (assert)
                  (("1" (expand "rem")
                    (("1" (lemma "ml1")
                      (("1" (inst -1 "y1!2" "y2!2") nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((zwf_zero const-decl "[int, int -> bool]" why "why/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ml1 formula-decl nil rem "ints/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (zwf const-decl "[int, int -> bool]" why "why/"))
   269914 740 t shostak))
 (nod_impl_po_4 0
  (nod_impl_po_4-1 nil 3463154740 3463155069
   ("" (skosimp*)
    (("" (expand "is_gcd")
      (("" (expand "is_divisor")
        (("" (replace -7)
          (("" (split)
            (("1" (skosimp*) (("1" (assert) nil nil)) nil)
             ("2" (lemma "gcd_def")
              (("2" (inst -1 "x1!1" "x2!1")
                (("2" (expand "is_gcd")
                  (("2" (expand "is_divisor")
                    (("2" (replace -2) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((is_gcd const-decl "bool" nod_spec_why nil)
    (gcd_def formula-decl nil nod_spec_why nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_divisor const-decl "bool" nod_spec_why nil))
   329355 410 t shostak))
 (nod_impl_po_5 0
  (nod_impl_po_5-1 nil 3463156125 3463156152
   ("" (skosimp*) (("" (assert) nil nil)) nil) proved
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   26930 20 t shostak))
 (nod_impl_po_6 0
  (nod_impl_po_6-1 nil 3463156181 3463157333
   ("" (skosimp*)
    (("" (replace -8)
      (("" (replace -7)
        (("" (replace -6)
          (("" (replace -5)
            (("" (split -4)
              (("1" (skosimp*)
                (("1" (lemma "lemma_gcd1")
                  (("1" (inst -1 "y2!1" "y1!1")
                    (("1" (lemma "lemma_gcd2")
                      (("1" (inst -1 "y2!1" "y1!1")
                        (("1" (expand "is_divisor")
                          (("1" (lemma "gcd_com")
                            (("1" (inst -1 "y2!1" "y1!1")
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (split)
                                        (("1"
                                          (lemma "rem_pos")
                                          (("1"
                                            (inst -1 "y2!1" "y1!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "rem" 1)
                                          (("2"
                                            (lemma "ml1")
                                            (("2"
                                              (inst -1 "y1!1" "y2!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "rem_pos")
                                        (("1"
                                          (inst -1 "y2!1" "y1!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "rem" 4)
                                              (("1"
                                                (lemma "ml1")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "y1!1"
                                                   "y2!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((lemma_gcd1 formula-decl nil nod_my nil)
    (lemma_gcd2 formula-decl nil nod_my nil)
    (is_divisor const-decl "bool" nod_spec_why nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (div_nat formula-decl nil div "ints/")
    (ml1 formula-decl nil rem "ints/")
    (rem_pos formula-decl nil nod_my nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gcd_com formula-decl nil nod_my nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   1151095 1230 t shostak))
 (nod_impl_po_7 0
  (nod_impl_po_7-1 nil 3463157350 3463157494
   ("" (skosimp*)
    (("" (expand "zwf_zero")
      (("" (expand "zwf")
        (("" (replace -7)
          (("" (replace -6)
            (("" (replace -5)
              (("" (split)
                (("1" (skosimp*)
                  (("1" (assert)
                    (("1" (expand "rem" 3)
                      (("1" (lemma "ml1")
                        (("1" (inst -1 "y1!1" "y2!1") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((zwf_zero const-decl "[int, int -> bool]" why "why/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ml1 formula-decl nil rem "ints/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zwf const-decl "[int, int -> bool]" why "why/"))
   144579 320 t shostak))
 (nod_impl_po_8 0
  (nod_impl_po_8-1 nil 3463157509 3463157740
   ("" (skosimp*)
    (("" (replace -5)
      (("" (assert)
        (("" (replace -4 :dir RL)
          (("" (lemma "gcd_def") (("" (inst -1 "x1!1" "x2!1") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (gcd_def formula-decl nil nod_spec_why nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   230804 140 t shostak)))

