(* this file was automatically generated; do not edit *)

(* zone variables *)
type global

(* logic types *)
(* heap variables *)
(* functions specifications *)
predicate isDivisor(m:int, n:int) = (CADUCEUS_1: eq_int(mod_int(n, m), (0)))

predicate isPrime(n:int) =
 (CADUCEUS_2:
 (ge_int(n, (1))
 and (forall i:int.
      ((ge_int(i, (2)) and lt_int(i, n)) -> (not isDivisor(i, n))))))

parameter maxpr_parameter :
 n:int ->
  { (CADUCEUS_3: ge_int(n, (2)))} int
  { (CADUCEUS_4:
    (((lt_int(result, n) and isDivisor(result, n)) and isPrime(result))
    and (forall i:int.
         ((gt_int(i, result) and lt_int(i, n)) ->
          ((not isPrime(i)) or (not isDivisor(i, n))))))) }

