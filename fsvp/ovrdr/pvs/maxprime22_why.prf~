(maxprime22_why
 (maxpr_impl_po_1 0
  (maxpr_impl_po_1-1 nil 3470060200 3470060256
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (split)
            (("1" (assert) nil nil) ("2" (assert) nil nil)
             ("3" (assert)
              (("3" (skolem!)
                (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   55769 170 t shostak))
 (maxpr_impl_po_2 0
  (maxpr_impl_po_2-1 nil 3470060264 3470060310
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!) (("" (flatten) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   45275 70 t shostak))
 (maxpr_impl_po_3 0
  (maxpr_impl_po_3-1 nil 3470060335 3470060439
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (split)
                        (("1" (assert) nil nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil)
                         ("3" (flatten)
                          (("3" (skolem!)
                            (("3" (flatten) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (flatten) (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   103148 320 t shostak))
 (maxpr_impl_po_4 0
  (maxpr_impl_po_4-1 nil 3469565873 3470060646
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   3833 230 t shostak))
 (maxpr_impl_po_5 0
  (maxpr_impl_po_5-1 nil 3469564989 3470060674
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten)
                            (("" (skolem!)
                              ((""
                                (flatten)
                                ((""
                                  (skolem!)
                                  ((""
                                    (flatten)
                                    ((""
                                      (skolem!)
                                      ((""
                                        (flatten)
                                        ((""
                                          (split 3)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil)
                                           ("3" (assert) nil nil)
                                           ("4"
                                            (flatten)
                                            (("4"
                                              (replace -2)
                                              (("4"
                                                (replace -19)
                                                (("4"
                                                  (inst -1 "j0!1")
                                                  (("4"
                                                    (simplify)
                                                    (("4"
                                                      (split -1)
                                                      (("1"
                                                        (expand
                                                         "isDivisor")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((isDivisor const-decl "bool" maxprime22_spec_why nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   10164 850 t shostak))
 (maxpr_impl_po_6 0
  (maxpr_impl_po_6-1 nil 3469564877 3470060703
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten)
                            (("" (skolem!)
                              ((""
                                (flatten)
                                ((""
                                  (skolem!)
                                  ((""
                                    (flatten)
                                    ((""
                                      (skolem!)
                                      ((""
                                        (flatten)
                                        (("" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (/= const-decl "boolean" notequal nil)
    (zwf_zero const-decl "[int, int -> bool]" why "why/")
    (zwf const-decl "[int, int -> bool]" why "why/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   10145 2120 t shostak))
 (maxpr_impl_po_7 0
  (maxpr_impl_po_7-1 nil 3469563733 3470060743
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten)
                            (("" (skolem!)
                              ((""
                                (flatten)
                                ((""
                                  (skolem!)
                                  ((""
                                    (flatten)
                                    ((""
                                      (split 4)
                                      (("1" (grind) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (flatten)
                                        (("3"
                                          (skolem!)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (split -15)
                                              (("1"
                                                (inst -1 "k!1")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (flatten)
                                        (("4"
                                          (simplify)
                                          (("4"
                                            (replace -2)
                                            (("4"
                                              (simplify)
                                              (("4"
                                                (replace -17)
                                                (("4"
                                                  (skolem!)
                                                  (("4"
                                                    (inst -1 "k!1")
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (isDivisor const-decl "bool" maxprime22_spec_why nil)
    (isPrime const-decl "bool" maxprime22_spec_why nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil))
   23010 6390 t shostak))
 (maxpr_impl_po_8 0
  (maxpr_impl_po_8-1 nil 3469563603 3470060768
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten)
                            (("" (skolem!)
                              ((""
                                (flatten)
                                ((""
                                  (skolem!)
                                  ((""
                                    (flatten)
                                    (("" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (/= const-decl "boolean" notequal nil)
    (zwf_zero const-decl "[int, int -> bool]" why "why/")
    (zwf const-decl "[int, int -> bool]" why "why/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   9168 1790 t shostak))
 (maxpr_impl_po_9 0
  (maxpr_impl_po_9-1 nil 3469557425 3470060834
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten)
                            (("" (split 3)
                              (("1" (propax) nil nil)
                               ("2"
                                (expand "isDivisor")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (expand "isPrime")
                                (("3"
                                  (split 1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (case "i0!1 = j0!1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (skolem!)
                                        (("1"
                                          (split -13)
                                          (("1"
                                            (inst -1 "i!2")
                                            nil
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split -12)
                                      (("1"
                                        (skolem!)
                                        (("1"
                                          (inst -1 "i!2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   proved
   ((isPrime const-decl "bool" maxprime22_spec_why nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (isDivisor const-decl "bool" maxprime22_spec_why nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   52411 740 t shostak))
 (maxpr_impl_po_10 0
  (maxpr_impl_po_10-1 nil 3469558307 3469561604
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten)
                            (("" (skolem!)
                              ((""
                                (flatten)
                                ((""
                                  (split 2)
                                  (("1" (assert) nil nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (replace -16)
                                    (("3"
                                      (skolem!)
                                      (("3"
                                        (inst -5 "k!1")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (split -9)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (replace -18)
                                              (("3"
                                                (simplify)
                                                (("3"
                                                  (split -15)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case "k!1 = i0!1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (expand
                                                         "isPrime")
                                                        (("1"
                                                          (flatten -4)
                                                          (("1"
                                                            (case
                                                             "i0!1 = j0!1")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (isPrime const-decl "bool" maxprime22_spec_why nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   3296971 12250 t shostak))
 (maxpr_impl_po_11 0
  (maxpr_impl_po_11-1 nil 3469561673 3469561933
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (skolem!)
                        (("" (skolem!)
                          (("" (flatten)
                            (("" (skolem!)
                              ((""
                                (flatten)
                                ((""
                                  (assert)
                                  ((""
                                    (skolem!)
                                    ((""
                                      (flatten)
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (zwf const-decl "[int, int -> bool]" why "why/")
    (zwf_zero const-decl "[int, int -> bool]" why "why/")
    (isDivisor const-decl "bool" maxprime22_spec_why nil)
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   3849 770 t shostak))
 (maxpr_impl_po_12 0
  (maxpr_impl_po_12-1 nil 3469561957 3469562419
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten)
                      (("" (split 3)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (skolem!)
                          (("3" (flatten)
                            (("3" (inst -9 "k!1")
                              (("3"
                                (simplify)
                                (("3"
                                  (case "k!1 = i0!1")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (expand "isDivisor")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (isDivisor const-decl "bool" maxprime22_spec_why nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   462059 7230 t shostak))
 (maxpr_impl_po_13 0
  (maxpr_impl_po_13-1 nil 3469562453 3469562516
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (skolem!)
                (("" (flatten)
                  (("" (skolem!)
                    (("" (flatten) (("" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zwf const-decl "[int, int -> bool]" why "why/")
    (zwf_zero const-decl "[int, int -> bool]" why "why/")
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (div const-decl "integer" div "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sgn const-decl "int" real_defs nil))
   62599 320 t shostak))
 (maxpr_impl_po_14 0
  (maxpr_impl_po_14-1 nil 3469562538 3469563550
   ("" (skolem!)
    (("" (flatten)
      (("" (skolem!)
        (("" (flatten)
          (("" (skolem!)
            (("" (flatten)
              (("" (split 1)
                (("1" (assert) nil nil)
                 ("2" (expand "isDivisor")
                  (("2" (lemma "fcuk") (("2" (inst -1 "n!1") nil nil))
                    nil))
                  nil)
                 ("3" (expand "isPrime") (("3" (grind) nil nil)) nil)
                 ("4" (case "i0!1 = 0")
                  (("1" (replace -1)
                    (("1" (skolem!)
                      (("1" (inst -6 "i!2")
                        (("1" (flatten)
                          (("1" (split -10)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (assert) nil nil)
                             ("4" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fcuk formula-decl nil maxprime22_why nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (isDivisor const-decl "bool" maxprime22_spec_why nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sgn const-decl "int" real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div const-decl "integer" div "ints/")
    (rem const-decl "{k | abs(k) < abs(j)}" rem "ints/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (isPrime const-decl "bool" maxprime22_spec_why nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   493973 810 t shostak)))

